<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\objects\AT32F421_IAP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\objects\AT32F421_IAP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Wed Jun 11 19:18:52 2025
<BR><P>
<H3>Maximum Stack Usage =        184 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; wk_usart1_init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9]">SysTick_Handler</a>
 <LI><a href="#[ba]">__ensure_systick_wrapper</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[15]">ADC1_CMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">ADC1_CMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">$Super$$SysTick_Handler</a> from lto-llvm-dfd08f.o(.text.SysTick_Handler) referenced from systick_wrapper_gnu.o(.text)
 <LI><a href="#[15]">ADC1_CMP_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from lto-llvm-dfd08f.o(.text.BusFault_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[e]">CRM_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[12]">DMA1_Channel1_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[13]">DMA1_Channel3_2_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[14]">DMA1_Channel5_4_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from lto-llvm-dfd08f.o(.text.DebugMon_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[c]">ERTC_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[11]">EXINT15_4_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[f]">EXINT1_0_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[10]">EXINT3_2_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[d]">FLASH_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from lto-llvm-dfd08f.o(.text.HardFault_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[24]">I2C1_ERR_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1e]">I2C1_EVT_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[25]">I2C2_ERR_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1f]">I2C2_EVT_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from lto-llvm-dfd08f.o(.text.MemManage_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from lto-llvm-dfd08f.o(.text.NMI_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[b]">PVM_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from lto-llvm-dfd08f.o(.text.PendSV_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[20]">SPI1_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[21]">SPI2_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from lto-llvm-dfd08f.o(.text.SVC_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from systick_wrapper_gnu.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from lto-llvm-dfd08f.o(.text.SystemInit) referenced from startup_at32f421.o(.text)
 <LI><a href="#[1a]">TMR14_GLOBAL_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1b]">TMR15_GLOBAL_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1c]">TMR16_GLOBAL_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[1d]">TMR17_GLOBAL_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[16]">TMR1_BRK_OVF_TRG_HALL_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[17]">TMR1_CH_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[18]">TMR3_GLOBAL_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[19]">TMR6_GLOBAL_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[22]">USART1_IRQHandler</a> from lto-llvm-dfd08f.o(.text.USART1_IRQHandler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[23]">USART2_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from lto-llvm-dfd08f.o(.text.UsageFault_Handler) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[a]">WWDT_IRQHandler</a> from startup_at32f421.o(.text) referenced from startup_at32f421.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_at32f421.o(.text)
 <LI><a href="#[35]">__perf_counter_init</a> from lto-llvm-dfd08f.o(.text.__perf_counter_init) referenced from lto-llvm-dfd08f.o(.init_array)
 <LI><a href="#[34]">fputc</a> from lto-llvm-dfd08f.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[2b]">iap_task</a> from lto-llvm-dfd08f.o(.text.iap_task) referenced 2 times from lto-llvm-dfd08f.o(.text.main)
 <LI><a href="#[2c]">led_task</a> from lto-llvm-dfd08f.o(.text.led_task) referenced 2 times from lto-llvm-dfd08f.o(.text.main)
 <LI><a href="#[26]">main</a> from lto-llvm-dfd08f.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[29]">perfc_port_insert_to_system_timer_insert_ovf_handler</a> from lto-llvm-dfd08f.o(.text.perfc_port_insert_to_system_timer_insert_ovf_handler) referenced from systick_wrapper_gnu.o(.text)
 <LI><a href="#[2d]">sensor_task</a> from lto-llvm-dfd08f.o(.text.sensor_task) referenced 2 times from lto-llvm-dfd08f.o(.text.main)
 <LI><a href="#[30]">tmt_create</a> from lto-llvm-dfd08f.o(.text.tmt_create) referenced 2 times from lto-llvm-dfd08f.o(.text.tmt_init)
 <LI><a href="#[31]">tmt_delete</a> from lto-llvm-dfd08f.o(.text.tmt_delete) referenced 2 times from lto-llvm-dfd08f.o(.text.tmt_init)
 <LI><a href="#[2e]">tmt_run</a> from lto-llvm-dfd08f.o(.text.tmt_run) referenced 2 times from lto-llvm-dfd08f.o(.text.tmt_init)
 <LI><a href="#[33]">tmt_run_ctrl</a> from lto-llvm-dfd08f.o(.text.tmt_run_ctrl) referenced 2 times from lto-llvm-dfd08f.o(.text.tmt_init)
 <LI><a href="#[32]">tmt_time_ctrl</a> from lto-llvm-dfd08f.o(.text.tmt_time_ctrl) referenced 2 times from lto-llvm-dfd08f.o(.text.tmt_init)
 <LI><a href="#[2f]">tmt_update_tick</a> from lto-llvm-dfd08f.o(.text.tmt_update_tick) referenced 2 times from lto-llvm-dfd08f.o(.text.tmt_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[37]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[46]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[39]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[b6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[b9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ADC1_CMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_CMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_CMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CRM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA1_Channel3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_Channel5_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>ERTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXINT15_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EXINT1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXINT3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>I2C1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C1_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C2_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TMR14_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TMR15_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TMR16_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TMR17_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TMR1_BRK_OVF_TRG_HALL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TMR1_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TMR6_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f421.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, systick_wrapper_gnu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>__ensure_systick_wrapper</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, systick_wrapper_gnu.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bc]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[38]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[bd]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[be]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[bf]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c0]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_insert_to_system_timer_insert_ovf_handler
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[4a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[36]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>$Super$$SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = $Super$$SysTick_Handler &rArr; wk_timebase_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_timebase_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systick_wrapper_gnu.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>USART1_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lto-llvm-dfd08f.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f421.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>fputc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lto-llvm-dfd08f.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; LockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lto-llvm-dfd08f.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main &rArr; wk_usart1_init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmt_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_gpio_config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_timebase_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_periph_clock_config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[29]"></a>perfc_port_insert_to_system_timer_insert_ovf_handler</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, lto-llvm-dfd08f.o(.text.perfc_port_insert_to_system_timer_insert_ovf_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = perfc_port_insert_to_system_timer_insert_ovf_handler &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_get_system_timer_top
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_resume_global_interrupt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_disable_global_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systick_wrapper_gnu.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c5]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[c6]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[c7]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[87]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ca]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[af]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ae]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[b2]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b1]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[63]"></a>wk_timebase_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.wk_timebase_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wk_timebase_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_timebase_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$SysTick_Handler
</UL>

<P><STRONG><a name="[64]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, lto-llvm-dfd08f.o(.text.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>usart_data_receive</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, lto-llvm-dfd08f.o(.text.usart_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>wk_system_clock_config</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.wk_system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wk_system_clock_config &rArr; system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_auto_step_mode_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb1_div_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb2_div_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_ahb_div_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_pll_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clock_source_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>crm_reset</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.crm_reset))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[9c]"></a>crm_clock_source_enable</STRONG> (Thumb, 162 bytes, Stack size 4 bytes, lto-llvm-dfd08f.o(.text.crm_clock_source_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_clock_source_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[9d]"></a>crm_flag_get</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.crm_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[9e]"></a>crm_pll_config</STRONG> (Thumb, 486 bytes, Stack size 12 bytes, lto-llvm-dfd08f.o(.text.crm_pll_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crm_pll_config
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[9f]"></a>crm_ahb_div_set</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, lto-llvm-dfd08f.o(.text.crm_ahb_div_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_ahb_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[a0]"></a>crm_apb2_div_set</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, lto-llvm-dfd08f.o(.text.crm_apb2_div_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_apb2_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[a1]"></a>crm_apb1_div_set</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, lto-llvm-dfd08f.o(.text.crm_apb1_div_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_apb1_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[a2]"></a>crm_auto_step_mode_enable</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, lto-llvm-dfd08f.o(.text.crm_auto_step_mode_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_auto_step_mode_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[a3]"></a>crm_sysclk_switch</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, lto-llvm-dfd08f.o(.text.crm_sysclk_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = crm_sysclk_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[6c]"></a>crm_sysclk_switch_status_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.crm_sysclk_switch_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[93]"></a>system_core_clock_update</STRONG> (Thumb, 552 bytes, Stack size 48 bytes, lto-llvm-dfd08f.o(.text.system_core_clock_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_system_clock_config
</UL>

<P><STRONG><a name="[81]"></a>wk_periph_clock_config</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.wk_periph_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wk_periph_clock_config &rArr; crm_periph_clock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>crm_periph_clock_enable</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.crm_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_periph_clock_config
</UL>

<P><STRONG><a name="[82]"></a>wk_nvic_config</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.wk_nvic_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wk_nvic_config &rArr; nvic_irq_enable &rArr; NVIC_EncodePriority.90
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>nvic_priority_group_config</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lto-llvm-dfd08f.o(.text.nvic_priority_group_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nvic_priority_group_config &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
</UL>

<P><STRONG><a name="[97]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
</UL>

<P><STRONG><a name="[98]"></a>NVIC_EncodePriority</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lto-llvm-dfd08f.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
</UL>

<P><STRONG><a name="[99]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
</UL>

<P><STRONG><a name="[88]"></a>nvic_irq_enable</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lto-llvm-dfd08f.o(.text.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nvic_irq_enable &rArr; NVIC_EncodePriority.90
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority.91
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority.90
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping.89
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_nvic_config
</UL>

<P><STRONG><a name="[7f]"></a>nvic_vector_table_set</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.nvic_vector_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvic_vector_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>wk_timebase_init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lto-llvm-dfd08f.o(.text.wk_timebase_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wk_timebase_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clock_source_config
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>wk_usart1_init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lto-llvm-dfd08f.o(.text.wk_usart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wk_usart1_init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_control_set
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_selection_config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>wk_gpio_config</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lto-llvm-dfd08f.o(.text.wk_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wk_gpio_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>tmt_init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.tmt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>iap_task</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.iap_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = iap_task &rArr; iap_command_handle &rArr; flash_word_program &rArr; flash_operation_wait_for &rArr; flash_operation_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_command_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-dfd08f.o(.text.main)
</UL>
<P><STRONG><a name="[2c]"></a>led_task</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.led_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_task &rArr; gpio_bits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_data_bit_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-dfd08f.o(.text.main)
</UL>
<P><STRONG><a name="[2d]"></a>sensor_task</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.sensor_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sensor_task
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-dfd08f.o(.text.main)
</UL>
<P><STRONG><a name="[66]"></a>init_cycle_counter</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lto-llvm-dfd08f.o(.text.init_cycle_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_cycle_counter &rArr; update_perf_counter &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_perf_counter
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_resume_global_interrupt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_clear_system_timer_ovf_pending
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_init_system_timer
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_disable_global_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__perf_counter_init
</UL>

<P><STRONG><a name="[58]"></a>EventRecorderInitialize</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, lto-llvm-dfd08f.o(.text.EventRecorderInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem &rArr; LockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetFreq
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>iap_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.iap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = iap_init &rArr; flash_sector_erase &rArr; flash_operation_wait_for &rArr; flash_operation_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>iap_command_handle</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.iap_command_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = iap_command_handle &rArr; flash_word_program &rArr; flash_operation_wait_for &rArr; flash_operation_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_system_reset
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_program
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_task
</UL>

<P><STRONG><a name="[7c]"></a>gpio_output_data_bit_read</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.gpio_output_data_bit_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_output_data_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
</UL>

<P><STRONG><a name="[7d]"></a>gpio_bits_reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.gpio_bits_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bits_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
</UL>

<P><STRONG><a name="[7e]"></a>gpio_bits_set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.gpio_bits_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bits_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_gpio_config
</UL>

<P><STRONG><a name="[92]"></a>SensorProc</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.SensorProc))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_task
</UL>

<P><STRONG><a name="[a4]"></a>wk_timebase_increase</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.wk_timebase_increase))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_timebase_handler
</UL>

<P><STRONG><a name="[6b]"></a>crm_clocks_freq_get</STRONG> (Thumb, 610 bytes, Stack size 56 bytes, lto-llvm-dfd08f.o(.text.crm_clocks_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_timebase_init
</UL>

<P><STRONG><a name="[a5]"></a>systick_clock_source_config</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, lto-llvm-dfd08f.o(.text.systick_clock_source_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = systick_clock_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_timebase_init
</UL>

<P><STRONG><a name="[95]"></a>gpio_default_para_init</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, lto-llvm-dfd08f.o(.text.gpio_default_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gpio_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_gpio_config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[a6]"></a>gpio_pin_mux_config</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, lto-llvm-dfd08f.o(.text.gpio_pin_mux_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_pin_mux_config
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[96]"></a>gpio_init</STRONG> (Thumb, 230 bytes, Stack size 12 bytes, lto-llvm-dfd08f.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_gpio_config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[94]"></a>usart_init</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, lto-llvm-dfd08f.o(.text.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[a7]"></a>usart_transmitter_enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.usart_transmitter_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_transmitter_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[a8]"></a>usart_receiver_enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.usart_receiver_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_receiver_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[a9]"></a>usart_parity_selection_config</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.usart_parity_selection_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_parity_selection_config
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[aa]"></a>usart_hardware_flow_control_set</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.usart_hardware_flow_control_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_hardware_flow_control_set
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[ab]"></a>usart_interrupt_enable</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, lto-llvm-dfd08f.o(.text.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[ac]"></a>usart_enable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.usart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wk_usart1_init
</UL>

<P><STRONG><a name="[75]"></a>flash_unlock</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.flash_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_command_handle
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
</UL>

<P><STRONG><a name="[6f]"></a>flash_sector_erase</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lto-llvm-dfd08f.o(.text.flash_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = flash_sector_erase &rArr; flash_operation_wait_for &rArr; flash_operation_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_wait_for
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_command_handle
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
</UL>

<P><STRONG><a name="[70]"></a>flash_word_program</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lto-llvm-dfd08f.o(.text.flash_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = flash_word_program &rArr; flash_operation_wait_for &rArr; flash_operation_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_wait_for
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_command_handle
</UL>

<P><STRONG><a name="[76]"></a>flash_lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.flash_lock))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_command_handle
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
</UL>

<P><STRONG><a name="[77]"></a>nvic_system_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.nvic_system_reset))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_command_handle
</UL>

<P><STRONG><a name="[2e]"></a>tmt_run</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, lto-llvm-dfd08f.o(.text.tmt_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tmt_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-dfd08f.o(.text.tmt_init)
</UL>
<P><STRONG><a name="[2f]"></a>tmt_update_tick</STRONG> (Thumb, 106 bytes, Stack size 4 bytes, lto-llvm-dfd08f.o(.text.tmt_update_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tmt_update_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-dfd08f.o(.text.tmt_init)
</UL>
<P><STRONG><a name="[30]"></a>tmt_create</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, lto-llvm-dfd08f.o(.text.tmt_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tmt_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-dfd08f.o(.text.tmt_init)
</UL>
<P><STRONG><a name="[31]"></a>tmt_delete</STRONG> (Thumb, 300 bytes, Stack size 12 bytes, lto-llvm-dfd08f.o(.text.tmt_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tmt_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-dfd08f.o(.text.tmt_init)
</UL>
<P><STRONG><a name="[32]"></a>tmt_time_ctrl</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, lto-llvm-dfd08f.o(.text.tmt_time_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tmt_time_ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-dfd08f.o(.text.tmt_init)
</UL>
<P><STRONG><a name="[33]"></a>tmt_run_ctrl</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, lto-llvm-dfd08f.o(.text.tmt_run_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tmt_run_ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-dfd08f.o(.text.tmt_init)
</UL>
<P><STRONG><a name="[6e]"></a>flash_operation_status_get</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, lto-llvm-dfd08f.o(.text.flash_operation_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = flash_operation_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_wait_for
</UL>

<P><STRONG><a name="[6d]"></a>flash_operation_wait_for</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lto-llvm-dfd08f.o(.text.flash_operation_wait_for))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flash_operation_wait_for &rArr; flash_operation_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_program
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
</UL>

<P><STRONG><a name="[8f]"></a>__NVIC_SystemReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_system_reset
</UL>

<P><STRONG><a name="[89]"></a>__NVIC_GetPriorityGrouping.89</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.__NVIC_GetPriorityGrouping.89))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[8a]"></a>NVIC_EncodePriority.90</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lto-llvm-dfd08f.o(.text.NVIC_EncodePriority.90))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_EncodePriority.90
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[8b]"></a>__NVIC_SetPriority.91</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.__NVIC_SetPriority.91))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority.91
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[8c]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, lto-llvm-dfd08f.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[8e]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, lto-llvm-dfd08f.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
</UL>

<P><STRONG><a name="[71]"></a>stdout_putchar</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lto-llvm-dfd08f.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; LockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[4e]"></a>EventRecordData</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, lto-llvm-dfd08f.o(.text.EventRecordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = EventRecordData &rArr; EventRecordItem &rArr; LockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>

<P><STRONG><a name="[5a]"></a>crc16_ccitt</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lto-llvm-dfd08f.o(.text.crc16_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[5c]"></a>EventRecorderTimerGetFreq</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.EventRecorderTimerGetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EventRecorderTimerGetFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_get_system_timer_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[5d]"></a>EventRecorderEnable</STRONG> (Thumb, 144 bytes, Stack size 28 bytes, lto-llvm-dfd08f.o(.text.EventRecorderEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EventRecorderEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[4b]"></a>EventGetTS</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lto-llvm-dfd08f.o(.text.EventGetTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EventGetTS &rArr; EventRecorderTimerGetCount &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_cmp_xch_32
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[50]"></a>EventRecordItem</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, lto-llvm-dfd08f.o(.text.EventRecordItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EventRecordItem &rArr; LockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsDumped
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsWritten
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockRecord
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockRecord
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[5e]"></a>EventRecorderStart</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lto-llvm-dfd08f.o(.text.EventRecorderStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = EventRecorderStart &rArr; EventRecordItem &rArr; LockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[4c]"></a>EventRecorderTimerGetCount</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.EventRecorderTimerGetCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EventRecorderTimerGetCount &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[4d]"></a>atomic_cmp_xch_32</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, lto-llvm-dfd08f.o(.text.atomic_cmp_xch_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = atomic_cmp_xch_32
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[53]"></a>GetRecordIndex</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.GetRecordIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetRecordIndex &rArr; atomic_inc_32
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc_32
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[54]"></a>LockRecord</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, lto-llvm-dfd08f.o(.text.LockRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LockRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[55]"></a>UnlockRecord</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, lto-llvm-dfd08f.o(.text.UnlockRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UnlockRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[56]"></a>IncrementRecordsWritten</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.IncrementRecordsWritten))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IncrementRecordsWritten &rArr; atomic_inc_32
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc_32
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[57]"></a>IncrementRecordsDumped</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.IncrementRecordsDumped))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IncrementRecordsDumped &rArr; atomic_inc_32
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc_32
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[62]"></a>atomic_inc_32</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, lto-llvm-dfd08f.o(.text.atomic_inc_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = atomic_inc_32
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsDumped
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsWritten
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordIndex
</UL>

<P><STRONG><a name="[4f]"></a>EventCheckFilter</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.EventCheckFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[52]"></a>GetContext</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.GetContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetContext &rArr; atomic_inc_8
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc_8
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[61]"></a>atomic_inc_8</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.atomic_inc_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atomic_inc_8
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
</UL>

<P><STRONG><a name="[35]"></a>__perf_counter_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.__perf_counter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __perf_counter_init &rArr; init_cycle_counter &rArr; update_perf_counter &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-dfd08f.o(.init_array)
</UL>
<P><STRONG><a name="[72]"></a>perfc_port_disable_global_interrupt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.perfc_port_disable_global_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = perfc_port_disable_global_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_insert_to_system_timer_insert_ovf_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_perf_counter
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[79]"></a>perfc_port_init_system_timer</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lto-llvm-dfd08f.o(.text.perfc_port_init_system_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = perfc_port_init_system_timer &rArr; perfc_port_resume_global_interrupt.123
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_resume_global_interrupt.123
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_disable_global_interrupt.122
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[7a]"></a>perfc_port_clear_system_timer_ovf_pending</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.perfc_port_clear_system_timer_ovf_pending))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[73]"></a>perfc_port_resume_global_interrupt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.perfc_port_resume_global_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = perfc_port_resume_global_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_insert_to_system_timer_insert_ovf_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_perf_counter
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[7b]"></a>update_perf_counter</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lto-llvm-dfd08f.o(.text.update_perf_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = update_perf_counter &rArr; get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_get_system_timer_freq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_resume_global_interrupt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_disable_global_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[60]"></a>perfc_port_get_system_timer_freq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.perfc_port_get_system_timer_freq))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_perf_counter
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetFreq
</UL>

<P><STRONG><a name="[5f]"></a>get_system_ticks</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lto-llvm-dfd08f.o(.text.get_system_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_system_ticks &rArr; check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_systick
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_resume_global_interrupt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_disable_global_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_perf_counter
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
</UL>

<P><STRONG><a name="[67]"></a>check_systick</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lto-llvm-dfd08f.o(.text.check_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_systick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_get_system_timer_top
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_is_system_timer_ovf_pending
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_get_system_timer_elapsed
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
</UL>

<P><STRONG><a name="[68]"></a>perfc_port_get_system_timer_elapsed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.perfc_port_get_system_timer_elapsed))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_systick
</UL>

<P><STRONG><a name="[69]"></a>perfc_port_is_system_timer_ovf_pending</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.perfc_port_is_system_timer_ovf_pending))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_systick
</UL>

<P><STRONG><a name="[6a]"></a>perfc_port_get_system_timer_top</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lto-llvm-dfd08f.o(.text.perfc_port_get_system_timer_top))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_insert_to_system_timer_insert_ovf_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_systick
</UL>

<P><STRONG><a name="[90]"></a>perfc_port_disable_global_interrupt.122</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.perfc_port_disable_global_interrupt.122))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = perfc_port_disable_global_interrupt.122
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_init_system_timer
</UL>

<P><STRONG><a name="[91]"></a>perfc_port_resume_global_interrupt.123</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lto-llvm-dfd08f.o(.text.perfc_port_resume_global_interrupt.123))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = perfc_port_resume_global_interrupt.123
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perfc_port_init_system_timer
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
